@page "/tramites"
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager Navegador
@using Microsoft.AspNetCore.Components.Web
@using SGE.Aplicacion.Servicios
@inject CasoDeUsoTramiteConsultaPorEtiqueta CasoDeUsoTramiteConsultaPorEtiqueta
@inject CasoDeUsoTramiteBaja CasoDeUsoTramiteBaja


<PageTitle>ListarTramite</PageTitle>

<h1>Listar Trámites</h1>

<p>A continuación se visualiza el listado de trámites.</p>

@if (_tramites == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>ExpedienteId</th>
                <th>Etiqueta del Tramite</th>
                <th>Contenido</th>
                <th>Fecha Creación</th>
                <th>Última modificación</th>
                <th>Id del usuario Ult Mod</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tramite in _tramites)
            {
                <tr>
                    <td>@tramite.Id</td>
                    <td>@tramite.ExpedienteId</td>
                    <td>@tramite.Etiqueta</td>
                    <td>@tramite.Contenido</td>
                    <td>@tramite.FechaCreacion</td>
                    <td>@tramite.UltimaModificacion</td>
                    <td>@tramite.IdUsuarioUltimaModificacion</td>
                </tr>
                <td>
                    <button class="btn btn-primary" @onclick="()=>ModificarTramite(tramite)">
                        <span class="oi oi-pencil"></span>
                    </button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="()=>ConfirmarEliminacion(tramite)">
                        <span class="oi oi-trash"></span>
                    </button>
                </td>
            }
        </tbody>
    </table>
}
<div class="container">
    <button @onclick="VolverHome" class="btn btn-primary">Home</button>
</div>

<DialogoConfirmacion @ref="dialogo" />

@code {
    List<Tramite> _tramites = new List<Tramite>();

    protected override void OnInitialized()
    {
        _tramites = CasoDeUsoTramiteConsultaPorEtiqueta.Ejecutar(EtiquetaTramite etiqueta);
    }

    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    void VolverHome()
    {
        NavigationManager.NavigateTo("/"); // Vuelve al Home
    }
    DialogoConfirmacion dialogo = null!;
    Tramite? _tramiteEliminar = null;
    private void ConfirmarEliminacion(Tramite tramite)
    {
        _tramiteEliminar = tramite;
        dialogo.Mensaje = $"¿Desea eliminar el tramite {tramite.Id}?";
        dialogo.Mostrar();
    }
    private void Eliminar()
    {
        if (_tramiteEliminar != null)
        {
            CasoDeUsoTramiteBaja.Ejecutar(_tramiteEliminar, _tramiteEliminar.IdUsuarioUltimaModificacion);
            _tramites = CasoDeUsoTramiteConsultaPorEtiqueta.Ejecutar(EtiquetaTramite etiqueta); //se actualiza la lista
        }
    }
    void ModificarTramite(Tramite tramite)
    {
        Navegador.NavigateTo($"tramites/editar/{tramite.Id}");
    }

}
